# Generated by RAD using generator based on datamodel-code-generator
#    source schema: cal_step-1.0.0.yaml
#    time stamp:    VERSION CONTROLLED
# DO NOT EDIT THIS FILE DIRECTLY!

from __future__ import annotations

from enum import Enum
from typing import Annotated, ClassVar

from pydantic import ConfigDict, Field

from roman_datamodels.core._model import DataModel


class AssignWcs(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class FlatField(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Dark(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class DqInit(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Jump(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Linearity(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Photom(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class SourceDetection(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class RampFit(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Refpix(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Saturation(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class OutlierDetection(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Tweakreg(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Skymatch(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class Resample(Enum):
    N_A = 'N/A'
    COMPLETE = 'COMPLETE'
    SKIPPED = 'SKIPPED'
    INCOMPLETE = 'INCOMPLETE'


class CalStep(DataModel):
    """
    Calibration Status
    """

    schema_uri: ClassVar[str] = "asdf://stsci.edu/datamodels/roman/schemas/cal_step-1.0.0"

    tag_uri: ClassVar[str] = "asdf://stsci.edu/datamodels/roman/tags/cal_step-1.0.0"

    model_config = ConfigDict(
        extra='allow',
    )
    assign_wcs: Annotated[
        AssignWcs,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_assign_wcs', 'GuideWindow.s_assign_wcs'],
                }
            },
            title='Assign World Coordinate System',
        ),
    ]
    flat_field: Annotated[
        FlatField,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_flat_field', 'GuideWindow.s_flat_field'],
                }
            },
            title='Flat Field Step',
        ),
    ]
    dark: Annotated[
        Dark,
        Field(
            json_schema_extra={
                'archive_catalog': {'datatype': 'nvarchar(15)', 'destination': ['ScienceRefData.s_dark', 'GuideWindow.s_dark']}
            },
            title='Dark Subtraction',
        ),
    ]
    dq_init: Annotated[
        DqInit,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_dq_init', 'GuideWindow.s_dq_init'],
                }
            },
            title='Data Quality Mask Step',
        ),
    ]
    jump: Annotated[
        Jump,
        Field(
            json_schema_extra={
                'archive_catalog': {'datatype': 'nvarchar(15)', 'destination': ['ScienceRefData.s_jump', 'GuideWindow.s_jump']}
            },
            title='Jump Detection Step',
        ),
    ]
    linearity: Annotated[
        Linearity,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_linearity', 'GuideWindow.s_linearity'],
                }
            },
            title='Linearity Correction',
        ),
    ]
    photom: Annotated[
        Photom,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_photom', 'GuideWindow.s_photom'],
                }
            },
            title='Photometry Step',
        ),
    ]
    source_detection: Annotated[
        SourceDetection,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_source_detection', 'GuideWindow.s_source_detection'],
                }
            },
            title='Source Detection Step',
        ),
    ]
    ramp_fit: Annotated[
        RampFit,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_ramp_fit', 'GuideWindow.s_ramp_fit'],
                }
            },
            title='Ramp Fitting',
        ),
    ]
    refpix: Annotated[
        Refpix,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_refpix', 'GuideWindow.s_refpix'],
                }
            },
            title='Reference Pixel Correction',
        ),
    ]
    saturation: Annotated[
        Saturation,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_saturation', 'GuideWindow.s_saturation'],
                }
            },
            title='Saturation Checking',
        ),
    ]
    outlier_detection: Annotated[
        OutlierDetection,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_outlier_detection', 'GuideWindow.s_outlier_detection'],
                }
            },
            title='outlier_detection',
        ),
    ]
    tweakreg: Annotated[
        Tweakreg,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_tweakreg', 'GuideWindow.s_tweakreg'],
                }
            },
            title='Tweakreg step',
        ),
    ]
    skymatch: Annotated[
        Skymatch,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_skymatch', 'GuideWindow.s_skymatch'],
                }
            },
            title='Sky Match step',
        ),
    ]
    resample: Annotated[
        Resample,
        Field(
            json_schema_extra={
                'archive_catalog': {
                    'datatype': 'nvarchar(15)',
                    'destination': ['ScienceRefData.s_resample', 'GuideWindow.s_resample'],
                }
            },
            title='Resample Step',
        ),
    ]
