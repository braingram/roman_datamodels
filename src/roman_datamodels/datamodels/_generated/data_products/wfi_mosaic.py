# Generated by RAD using generator based on datamodel-code-generator
#    source schema: data_products/wfi_mosaic-1.0.0.yaml
#    time stamp:    VERSION CONTROLLED
# DO NOT EDIT THIS FILE DIRECTLY!

from __future__ import annotations

from enum import Enum
from typing import Annotated, ClassVar, List, Optional

from pydantic import Field

from roman_datamodels.core._base import BaseDataModel
from roman_datamodels.core._model import DataModel
from roman_datamodels.core.adaptors import AstropyQuantity, NdArray, Unit, np

from .. import photometry
from ..common import Common


class WeightType(Enum):
    exptime = 'exptime'
    ivm = 'ivm'


class resample(BaseDataModel):
    """
    Resample information
    """

    schema_uri: ClassVar[None] = None
    pixel_scale_ratio: Annotated[float, Field(title='Pixel Scale Ratio of resample to input scale')]
    pixfrac: Annotated[float, Field(title='Fraction of pixel to use for pixel convolution')]
    pointings: Annotated[int, Field(title='Number of pointings in the resample')]
    product_exposure_time: Annotated[float, Field(title='Total exposure time for resample product')]
    weight_type: Annotated[WeightType, Field(title='Drizzle weight type for resample')]


class meta(Common):
    schema_uri: ClassVar[None] = None
    photometry: photometry.Photometry
    resample: Annotated[Optional[resample], Field(None, title='Resample information')]


class WfiMosaicModel(DataModel):
    """
    The schema for WFI Level 3 mosaics.

    """

    schema_uri: ClassVar[str] = "asdf://stsci.edu/datamodels/roman/schemas/data_products/wfi_mosaic-1.0.0"

    tag_uri: ClassVar[str] = "asdf://stsci.edu/datamodels/roman/tags/data_products/wfi_mosaic-1.0.0"

    meta: meta
    data: Annotated[
        AstropyQuantity[np.float32, 2, Unit("electron / s"), (4088, 4088)],
        Field(title='Science data, excluding border reference pixels.'),
    ]
    err: AstropyQuantity[np.float32, 2, Unit("electron / s"), (4088, 4088)]
    context: NdArray[np.int32, 3, (2, 4088, 4088)]
    weight: NdArray[np.float32, 2, (4088, 4088)]
    var_poisson: AstropyQuantity[np.float32, 2, Unit("electron2 / s2"), (4088, 4088)]
    var_rnoise: AstropyQuantity[np.float32, 2, Unit("electron2 / s2"), (4088, 4088)]
    var_flat: AstropyQuantity[np.float32, 2, Unit("electron2 / s2"), (4088, 4088)]
    cal_logs: Annotated[List[str], Field(title='Calibration log messages')]
